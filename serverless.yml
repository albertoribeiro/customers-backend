
service: pagaleve-customers


provider:
  name: aws
  runtime: nodejs12.x
  environment:
    USERS_TABLE: Users
    CUSTOMERS_TABLE: Customers
    LOCALSTACK_HOST: ${env:LOCALSTACK_HOST, "localhost"}
    DYNAMODB_PORT: ${env:DYNAMODB_PORT, "4566"}
    JWT_KEY: 2518a96b0c9c33d8fea7d0416557e3ab
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:Scan
        - dynamodb:Query
        - dynamodb:DescribeTable
        - dynamodb:ListStreams
        - dynamodb:DescribeStream
      Resource:
        - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USERS_TABLE}"
        - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.CUSTOMERS_TABLE}"

package:
  excludeDevDependencies: true
  individually: true

plugins:
  - serverless-localstack
  - serverless-dynamodb-local
  - serverless-offline

custom:
  localstack:
    stages:
      - local
    autostart: false
  dynamodb:
    stages:
      - ${self:provider.stage}
    start:
      host: ${self:provider.environment.LOCALSTACK_HOST}
      port: ${self:provider.environment.DYNAMODB_PORT}
      migrate: true
      noStart: true
      seed: true
    seed:
      users:
        sources:
          - table: ${self:provider.environment.USERS_TABLE}
            sources: [ './seed/users.json' ]
      customers:
        sources:
          - table: ${self:provider.environment.CUSTOMERS_TABLE}
            sources: [ './seed/customers.json' ]

resources:
  Resources:
    GatewayResponseDefault4XX:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: 'ApiGatewayRestApi'
    GatewayResponseDefault5XX:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: DEFAULT_5XX
        RestApiId:
          Ref: 'ApiGatewayRestApi'
    Users:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.USERS_TABLE}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    Customers:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.CUSTOMERS_TABLE}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES

functions:
  graphql:
    handler: src/handler.handler
    events:
      - http:
          path: graphql
          method: any
  authorizerFunc:
    handler: src/api/controllers/auth/authorizer.handler             
  login:
    handler: src/api/controllers/login/login.handler
    events:
      - http:
          path: login
          method: post
          cors: true
  readAll:
    handler: src/api/handler.customersReadAll
    events:
      - http:
          path: customers
          method: get
          cors: true
          authorizer: authorizerFunc
  create:
    handler: src/api/handler.customersCreate
    events:
      - http:
          path: customers
          method: post
          cors: true
          authorizer: authorizerFunc
  readOne:
    handler: src/api/handler.customersReadOne
    events:
      - http:
          path: customers/{id}
          method: get
          cors: true
          authorizer: authorizerFunc
  delete:
    handler: src/api/handler.customersDelete
    events:
      - http:
          path: customers/{id}
          method: delete
          cors: true
          authorizer: authorizerFunc
  update:
    handler: src/api/handler.customersUpdate
    events:
      - http:
          path: customers/{id}
          method: put
          cors: true
          authorizer: authorizerFunc