openapi: 3.0.0
info:
  description: Pagaleve Customers API doc
  title: Customers
  termsOfService: 'http://swagger.io/terms/'
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
servers:
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/ARF9/pagaleve-customers/1.0.0
tags:
  - name: login
    description: Athenticate api user
  - name: customers
    description: Operations about customers
paths:
  /login:
    post:
      tags:
        - login
      summary: Athenticate user into the API
      operationId: login
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        description: User object
        required: true
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
            application/xml:
              schema:
                type: object
        '400':
          description: Invalid username/password supplied
  /customers:
    post:
      tags:
        - customers
      summary: Create customer
      description: This can only be done by authenticated User.
      operationId: createCustomer
      responses:
        '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Customer'
        '400':
          description: Invalid ID supplied
        '404':
          description: Customer not found
        '405':
          description: Validation exception
      requestBody:
        $ref: '#/components/requestBodies/Customer'
    get:
      tags:
        - customers
      summary: Returns all Customers
      operationId: listCustomers
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Customer'
  '/customers/{id}':
    put:
      tags:
        - customers
      summary: Update an existing customer
      operationId: updateCustomer
      parameters:
        - name: id
          in: path
          description: ID of customer that needs to be updated
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Customer'
        '400':
          description: Invalid ID supplied
        '404':
          description: Customer not found
        '405':
          description: Validation exception
      requestBody:
        $ref: '#/components/requestBodies/Customer'
      
    delete:
      tags:
        - customers
      summary: Delete customer by ID
      operationId: deleteCustomer
      parameters:
        - name: id
          in: path
          description: ID of customer that needs to be deleted
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
        '400':
          description: Invalid ID supplied
        '404':
          description: Customer not found
        '405':
          description: Validation exception
    get:
      tags:
        - customers
      summary: Find customer by ID
      operationId: findCustomer
      parameters:
        - name: id
          in: path
          description: ID of customer that needs to be fetched
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
        '400':
          description: Invalid ID supplied
        '404':
          description: Customer not found
        '405':
          description: Validation exception
components:
  schemas:
    Customer:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        document:
          type: string
        birthdate:
          type: string
        email:
          type: string
        phone:
          type: string
        address:
          type: string
        zip:
          type: string
      xml:
        name: Customer
    CustomerInput:
      type: object
      properties:
        name:
          type: string
        document:
          type: string
        birthdate:
          type: string
        email:
          type: string
        phone:
          type: string
        address:
          type: string
        zip:
          type: string
      xml:
        name: CustomerInput
    User:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
    LoginResponse:
      type: object
      properties:
        token:
          type: string
        user:
          type: string
  requestBodies:
    Customer:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CustomerInput'
        application/xml:
          schema:
            $ref: '#/components/schemas/CustomerInput'
      description: Customer object that needs to be added 
      required: true